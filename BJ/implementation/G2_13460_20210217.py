from copy import deepcopy

def move_num(l):
    '''
    [0,0,0,4,4,8] => [0,0,0,0,8,8] 
    [4,0,4,0,4,4] => [0,0,0,0,8,8]
    '''
    global N
    
    return_list = [0 for i in range(N)]
    tmp, tmp_length = [], 1

    for i in range(N-1, -1, -1):
        if not tmp and l[i] != 0:
            tmp.append([l[i], False])
        elif l[i] != 0:
            if not tmp[-1][1] and tmp[-1][0] == l[i]:
                tmp[-1][0] *= 2
                tmp[-1][1] = True
            else:
                tmp.append([l[i], False])
                tmp_length += 1

    if not tmp:
        return l

    for i in range(tmp_length):
        return_list[N-1-i] = tmp[i][0]

    return return_list

def solve():
    global N
    new_board = deepcopy(board)
    for direction in final_direction:
        if direction == 0: # 북
            
            for j in range(N):
                input_list = []
                for i in range(N-1,-1,-1):
                    input_list.append(new_board[i][j])
                output_list = move_num(input_list)
                output_list.reverse()
                for i in range(N):
                    new_board[i][j] = output_list[i]

        elif direction == 1: # 남
            
            for j in range(N):
                input_list = []
                for i in range(N):
                    input_list.append(new_board[i][j])
                output_list = move_num(input_list)
                for i in range(N):
                    new_board[i][j] = output_list[i]

        elif direction == 2: # 동
            for i in range(N):
                output_list = move_num(new_board[i])
                for j in range(N):
                    new_board[i][j] = output_list[j]

        elif direction == 3: # 서
            for i in range(N):
                a = new_board[i]
                a.reverse()
                output_list = move_num(a)
                output_list.reverse()
                for j in range(N-1,-1,-1):
                    new_board[i][j] = output_list[j]
            
    max_num = 0
    for row in new_board:
        for item in row:
            max_num = max(max_num, item)

    return max_num

def make_direction(cnt):
    global answer
    if cnt == 5:
        answer = max(answer, solve())
        return
    
    for i in init_direction:
        final_direction.append(i)
        make_direction(cnt+1)
        final_direction.pop()

answer = 0
N = int(input())
board = [list(map(int, input().split())) for i in range(N)]

for row in board:
    for item in row:
        answer = max(answer, item)

init_direction = [0,1,2,3]
final_direction = []

for i in init_direction:
    final_direction.append(i)
    make_direction(1)
    final_direction.pop()

print(answer)

# test_input = list(map(int, input().split()))
# print(move_num(test_input))

'''
10
16 16 8 32 32 0 0 8 8 8
16 0 0 0 0 8 0 0 0 16
0 0 0 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
-> 64

5
2 2 4 8 16
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
2 2 4 8 16
=>64

7
2 2 2 2 2 2 2
2 0 2 2 2 2 2
2 0 2 2 2 2 2
2 0 2 2 2 2 2
2 2 2 0 2 2 2 
2 2 2 2 2 2 0
2 2 2 2 2 2 0
=> 32

10
0 0 64 32 32 0 0 0 0 0
0 32 32 64 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0 
64 64 128 0 0 0 0 0 0 0
0 0 64 32 32 0 0 0 0 0
0 32 32 64 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0 
64 64 128 0 0 0 0 0 0 0
128 32 2 4 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0
=> 1024

20
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
=>32768

3
2 2 4
0 0 0
0 0 0
-> 8

2
8 16
16 8
=>16

4
8 16 0 0
0 0 16 8
0 0 0 0
0 0 0 0
=>32

4
0 0 0 0
4 0 0 0
8 32 4 0
8 8 4 0
->64

10
8 8 4 16 32 0 0 8 8 8
8 8 4 0 0 8 0 0 0 0
16 0 0 16 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 16
0 0 0 0 0 0 0 0 0 2
=>128

10
0 0 0 0 0 32 8 64 8 16
0 0 0 0 0 0 0 16 8 16
0 0 0 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
=> 128

10
16 16 8 32 32 0 0 8 8 8
16 0 0 0 0 8 0 0 0 16
0 0 0 0 0 0 0 0 0 2
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0
=> 64

3
256 8 128
16 0 256
0 8 0
=> 512

5
2 2 4 8 16
0 0 0 0 0
0 0 0 0 0
0 0 0 0 0
2 2 4 8 16
=> 64

6
2 2 4 8 16 32
0 0 0 8 0 0
0 0 0 16 0 0
0 0 0 32 0 0
0 0 0 64 0 0
0 0 0 128 0 0
=> 256

4
8 16 0 0
0 0 16 8
0 0 0 0
0 0 0 0
=> 32

7
2 2 2 2 2 2 2
2 0 2 2 2 2 2
2 0 2 2 2 2 2
2 0 2 2 2 2 2
2 2 2 0 2 2 2
2 2 2 2 2 2 0
2 2 2 2 2 2 0
=> 32

10
0 0 64 32 32 0 0 0 0 0
0 32 32 64 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0
64 64 128 0 0 0 0 0 0 0
0 0 64 32 32 0 0 0 0 0
0 32 32 64 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0
64 64 128 0 0 0 0 0 0 0
128 32 2 4 0 0 0 0 0 0
0 0 128 0 0 0 0 0 0 0
=> 1024

20
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 0 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 0 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 0 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 0 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
0 0 8 0 0 0 0 1 0 1 0 0 0 0 0 0 0 1 0 1
1 3 8 0 1 3 0 0 1 3 0 0 1 3 0 0 1 3 0 0
0 2 4 0 0 2 0 0 0 2 0 0 0 2 0 0 0 2 0 0
1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0 1 0 4 0
=> 32

3
4 512 2
512 2 64
4 8 64
=> 1024



'''